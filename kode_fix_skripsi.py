# -*- coding: utf-8 -*-
"""Kode Fix Skripsi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1blpYEuHBqVDTONdbbKRDYgUBhxhysYNw
"""

import numpy as np

def calculate_centroids(X_train, y_train):
    classes = np.unique(y_train)
    centroids = []
    for c in classes:
        idx = np.where(y_train == c)
        centroid = np.mean(X_train[idx], axis=0)
        centroids.append(centroid)
    return np.array(centroids)

def euclidean(a, b):
    return np.sqrt(np.sum((a - b) ** 2))

def z_distance(a, b, bc, mu):
    return euclidean(a, b) + mu * euclidean(a, bc)

def improved_knn(X_train, y_train, X_test, K, mu):
    centroids = calculate_centroids(X_train, y_train)
    y_pred = []
    for x in X_test:
        z_distances = []
        for i in range(len(X_train)):
            class_idx = np.where(np.unique(y_train) == y_train[i])
            z_dist = z_distance(x, X_train[i], centroids[class_idx], mu)
            z_distances.append(z_dist)
        k_nearest = np.argsort(z_distances)[:K]
        k_nearest_labels = y_train[k_nearest]
        y_pred.append(np.argmax(np.bincount(k_nearest_labels)))
    return np.array(y_pred)

from google.colab import files
#uploaded = files.upload()

# Import library yang diperlukan
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Load dataset
df = pd.read_csv('Data non duplicate.csv',encoding='latin1')

# Pisahkan fitur dan target
X = df.drop('Kode', axis=1)
y = df['Kode']

# Bagi dataset menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Set the number of neighbors (K) and the mu parameter
K = 4
mu = 0.1

X_test = X_test.to_numpy()
X_train = X_train.to_numpy()
y_test = y_test.to_numpy()
y_train = y_train.to_numpy()

# Use the improved_knn function to make predictions
y_pred = improved_knn(X_train, y_train, X_test, K, mu)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
print("Y_test",y_test)
print("Y_Pred", y_pred)
# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Calculate precision
precision = precision_score(y_test, y_pred, average='macro')
print("Precision:", precision)

# Calculate recall
recall = recall_score(y_test, y_pred, average='macro', zero_division=0)
print("Recall:", recall)

# Calculate F1 score
f1 = f1_score(y_test, y_pred, average='macro')
print("F1 Score:", f1)

# Impor library yang diperlukan
import numpy as np
from scipy.spatial import distance
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.utils import shuffle

# Fungsi dan kode lainnya...

# Load dataset
#df = pd.read_csv('Data non duplicate.csv',encoding='latin1')

# Pisahkan fitur dan target
X = df.drop('Kode', axis=1).to_numpy()
y = df['Kode'].to_numpy()

# Acak data
X, y = shuffle(X, y, random_state=42)

# Set the number of neighbors (K) and the mu parameter
K = 4
mu = 0.1

# Define the K-fold Cross Validator
kfold = KFold(n_splits=5)
nilai_akurasi = []
# K-fold Cross Validation model evaluation
fold_no = 1
for train_index, test_index in kfold.split(X):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]
    # Use the improved_knn function to make predictions
    y_pred = improved_knn(X_train, y_train, X_test, K, mu)
    print("y_pred",y_pred)
    print("y_test",y_test)


    # Calculate accuracy
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Accuracy for fold {fold_no}: {accuracy}")
    nilai_akurasi.append(accuracy)
    # Calculate precision
    precision = precision_score(y_test, y_pred, average='macro', zero_division=1)
    print(f"Precision for fold {fold_no}: {precision}")

    # Calculate recall
    recall = recall_score(y_test, y_pred, average='macro', zero_division=0)
    print(f"Recall for fold {fold_no}: {recall}")

    # Calculate F1 score
    f1 = f1_score(y_test, y_pred, average='macro')
    print(f"F1 Score for fold {fold_no}: {f1}")
    print("-----------------------------------------")
    fold_no += 1

# Hitung akurasi rata-rata
average_accuracy = sum(nilai_akurasi) / len(nilai_akurasi)

# Cetak akurasi rata-rata
print("Akurasi rata-rata:", average_accuracy)